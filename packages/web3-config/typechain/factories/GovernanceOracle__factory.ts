/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  GovernanceOracle,
  GovernanceOracleInterface,
} from "../GovernanceOracle";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "ancillaryData",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "callbackError",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "governanceApproved",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "identifier",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_ancillaryData",
        type: "bytes",
      },
      {
        internalType: "int256",
        name: "price",
        type: "int256",
      },
    ],
    name: "priceSettled",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "requestGovernanceCheck",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405260008060006101000a81548160ff02191690831515021790555060008060016101000a81548160ff0219169083151502179055506040518060600160405280602981526020016200146f6029913960019080519060200190620000699291906200037e565b506040518060a00160405280606581526020016200140a60659139600290805190602001906200009b9291906200037e565b506040518060400160405280601781526020017f206f662074686520766f74657320617265205945533f2c00000000000000000081525060039080519060200190620000e99291906200037e565b5060405180610160016040528061013e81526020016200149861013e9139600490805190602001906200011e9291906200040f565b507f5945535f4f525f4e4f5f515545525900000000000000000000000000000000006005554260065573bf7a7169562078c96f0ec1a8afd6ae50f12e5a99600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550348015620001a957600080fd5b50600073ed0169a88d267063184b0853baaaae66c3c154b2905060008190508073ffffffffffffffffffffffffffffffffffffffff1663aafd5e406040518163ffffffff1660e01b81526004016200020190620005ba565b60206040518083038186803b1580156200021a57600080fd5b505afa1580156200022f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002559190620004ed565b600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16680ad78ebc5ac62000006040518363ffffffff1660e01b81526004016200031f9291906200058d565b602060405180830381600087803b1580156200033a57600080fd5b505af11580156200034f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000375919062000519565b505050620006cc565b8280546200038c9062000633565b90600052602060002090601f016020900481019282620003b05760008555620003fc565b82601f10620003cb57805160ff1916838001178555620003fc565b82800160010185558215620003fc579182015b82811115620003fb578251825591602001919060010190620003de565b5b5090506200040b9190620004a0565b5090565b8280546200041d9062000633565b90600052602060002090601f0160209004810192826200044157600085556200048d565b82601f106200045c57805160ff19168380011785556200048d565b828001600101855582156200048d579182015b828111156200048c5782518255916020019190600101906200046f565b5b5090506200049c9190620004a0565b5090565b5b80821115620004bb576000816000905550600101620004a1565b5090565b600081519050620004d08162000698565b92915050565b600081519050620004e781620006b2565b92915050565b6000602082840312156200050057600080fd5b60006200051084828501620004bf565b91505092915050565b6000602082840312156200052c57600080fd5b60006200053c84828501620004d6565b91505092915050565b6200055081620005d5565b82525050565b62000561816200061f565b82525050565b7f4f7074696d69737469634f7261636c6500000000000000000000000000000000815250565b6000604082019050620005a4600083018562000545565b620005b3602083018462000556565b9392505050565b6000602082019050620005d06000830162000567565b919050565b6000620005e282620005f5565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006200062c8262000615565b9050919050565b600060028204905060018216806200064c57607f821691505b6020821081141562000663576200066262000669565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b620006a381620005d5565b8114620006af57600080fd5b50565b620006bd81620005e9565b8114620006c957600080fd5b50565b610d2e80620006dc6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806304cc1fd51461005c5780636559905714610078578063661a4f5314610096578063e3389f09146100b4578063f2f1f22f146100be575b600080fd5b6100766004803603810190610071919061058a565b6100dc565b005b6100806102a4565b60405161008d9190610924565b60405180910390f35b61009e610332565b6040516100ab9190610863565b60405180910390f35b6100bc610345565b005b6100c66104bd565b6040516100d39190610863565b60405180910390f35b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461016c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161016390610966565b60405180910390fd5b60065483146101b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101a790610946565b60405180910390fd5b60055484146101f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101eb906109a6565b60405180910390fd5b8180519060200120600460405161020b919061084c565b604051809103902014610253576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024a90610986565b60405180910390fd5b670de0b6b3a76400008114156102825760016000806101000a81548160ff02191690831515021790555061029e565b6001600060016101000a81548160ff0219169083151502179055505b50505050565b600480546102b190610b3d565b80601f01602080910402602001604051908101604052809291908181526020018280546102dd90610b3d565b801561032a5780601f106102ff5761010080835404028352916020019161032a565b820191906000526020600020905b81548152906001019060200180831161030d57829003601f168201915b505050505081565b600060019054906101000a900460ff1681565b600073bf7a7169562078c96f0ec1a8afd6ae50f12e5a999050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166311df92f1600554600654600485670de0b6b3a76400006040518663ffffffff1660e01b81526004016103ce95949392919061087e565b602060405180830381600087803b1580156103e857600080fd5b505af11580156103fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104209190610605565b50600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663473c45fe600554600654600460786040518563ffffffff1660e01b815260040161048894939291906108d8565b600060405180830381600087803b1580156104a257600080fd5b505af11580156104b6573d6000803e3d6000fd5b5050505050565b60008054906101000a900460ff1681565b60006104e16104dc846109eb565b6109c6565b9050828152602081018484840111156104f957600080fd5b610504848285610afb565b509392505050565b60008135905061051b81610cb3565b92915050565b600082601f83011261053257600080fd5b81356105428482602086016104ce565b91505092915050565b60008135905061055a81610cca565b92915050565b60008135905061056f81610ce1565b92915050565b60008151905061058481610ce1565b92915050565b600080600080608085870312156105a057600080fd5b60006105ae8782880161050c565b94505060206105bf87828801610560565b935050604085013567ffffffffffffffff8111156105dc57600080fd5b6105e887828801610521565b92505060606105f98782880161054b565b91505092959194509250565b60006020828403121561061757600080fd5b600061062584828501610575565b91505092915050565b61063781610a69565b82525050565b61064681610a75565b82525050565b600061065782610a31565b6106618185610a3c565b9350610671818560208601610b0a565b61067a81610bfe565b840191505092915050565b6000815461069281610b3d565b61069c8186610a3c565b945060018216600081146106b757600181146106c9576106fc565b60ff19831686526020860193506106fc565b6106d285610a1c565b60005b838110156106f4578154818901526001820191506020810190506106d5565b808801955050505b50505092915050565b6000815461071281610b3d565b61071c8186610a4d565b9450600182166000811461073757600181146107485761077b565b60ff1983168652818601935061077b565b61075185610a1c565b60005b8381101561077357815481890152600182019150602081019050610754565b838801955050505b50505092915050565b61078d81610ab3565b82525050565b61079c81610ad7565b82525050565b6107ab81610ae9565b82525050565b60006107be601483610a58565b91506107c982610c0f565b602082019050919050565b60006107e1600e83610a58565b91506107ec82610c38565b602082019050919050565b6000610804601383610a58565b915061080f82610c61565b602082019050919050565b6000610827600f83610a58565b915061083282610c8a565b602082019050919050565b61084681610aa9565b82525050565b60006108588284610705565b915081905092915050565b6000602082019050610878600083018461062e565b92915050565b600060a082019050610893600083018861063d565b6108a0602083018761083d565b81810360408301526108b28186610685565b90506108c16060830185610784565b6108ce6080830184610793565b9695505050505050565b60006080820190506108ed600083018761063d565b6108fa602083018661083d565b818103604083015261090c8185610685565b905061091b60608301846107a2565b95945050505050565b6000602082019050818103600083015261093e818461064c565b905092915050565b6000602082019050818103600083015261095f816107b1565b9050919050565b6000602082019050818103600083015261097f816107d4565b9050919050565b6000602082019050818103600083015261099f816107f7565b9050919050565b600060208201905081810360008301526109bf8161081a565b9050919050565b60006109d06109e1565b90506109dc8282610b6f565b919050565b6000604051905090565b600067ffffffffffffffff821115610a0657610a05610bcf565b5b610a0f82610bfe565b9050602081019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b60008115159050919050565b6000819050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610abe82610ac5565b9050919050565b6000610ad082610a89565b9050919050565b6000610ae282610aa9565b9050919050565b6000610af482610aa9565b9050919050565b82818337600083830152505050565b60005b83811015610b28578082015181840152602081019050610b0d565b83811115610b37576000848401525b50505050565b60006002820490506001821680610b5557607f821691505b60208210811415610b6957610b68610ba0565b5b50919050565b610b7882610bfe565b810181811067ffffffffffffffff82111715610b9757610b96610bcf565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f646966666572656e742074696d657374616d7073000000000000000000000000600082015250565b7f6e6f7420617574686f72697a6564000000000000000000000000000000000000600082015250565b7f73616d6520616e63696c6c617279206461746100000000000000000000000000600082015250565b7f73616d65206964656e7469666965720000000000000000000000000000000000600082015250565b610cbc81610a75565b8114610cc757600080fd5b50565b610cd381610a7f565b8114610cde57600080fd5b50565b610cea81610aa9565b8114610cf557600080fd5b5056fea26469706673582212204326fbd85bb5da1cd4cc8581429f5900612f92b2457e0f791d693846cd2ac8d864736f6c63430008040033713a7469746c653a20486176652074686520736e617073686f7420766f746520636f6e7461696e696e67205b524f41444d41505f4143435045435445445d20636f6d706c657465642077697468206d6f7265207468616e2035302070657263656e7461676568747470733a2f2f64656d6f2e736e617073686f742e6f72672f232f6465766465766465762e

type GovernanceOracleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GovernanceOracleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GovernanceOracle__factory extends ContractFactory {
  constructor(...args: GovernanceOracleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "GovernanceOracle";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<GovernanceOracle> {
    return super.deploy(overrides || {}) as Promise<GovernanceOracle>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): GovernanceOracle {
    return super.attach(address) as GovernanceOracle;
  }
  connect(signer: Signer): GovernanceOracle__factory {
    return super.connect(signer) as GovernanceOracle__factory;
  }
  static readonly contractName: "GovernanceOracle";
  public readonly contractName: "GovernanceOracle";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GovernanceOracleInterface {
    return new utils.Interface(_abi) as GovernanceOracleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GovernanceOracle {
    return new Contract(address, _abi, signerOrProvider) as GovernanceOracle;
  }
}
