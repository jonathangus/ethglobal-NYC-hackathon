{
  "address": "0x851356ae760d987E095750cCeb3bC6014560891C",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "aggregate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "returnData",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "blockAndAggregate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "returnData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Result[]",
          "name": "returnData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getBlockHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockCoinbase",
      "outputs": [
        {
          "internalType": "address",
          "name": "coinbase",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockDifficulty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "difficulty",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockGasLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "gaslimit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getEthBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastBlockHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "requireSuccess",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "tryAggregate",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "returnData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Result[]",
          "name": "returnData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "requireSuccess",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "tryBlockAndAggregate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "returnData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall2.Result[]",
          "name": "returnData",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x24d58b6fa129c8bc4212871c7d05a512a7b4156896b0060e2736d7de45056026",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x851356ae760d987E095750cCeb3bC6014560891C",
    "transactionIndex": 0,
    "gasUsed": "1022439",
    "logsBloom": "0x
    "blockHash": "0xcd2adb6986613cee427a988a28f67bf65a74191683ab4841b53554543ba3d72a",
    "transactionHash": "0x24d58b6fa129c8bc4212871c7d05a512a7b4156896b0060e2736d7de45056026",
    "logs": [],
    "blockNumber": 31774,
    "cumulativeGasUsed": "1022439",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f7ce6fe57d9ea2297ca26ad2dcf759b1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"aggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"returnData\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"blockAndAggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getBlockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockCoinbase\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"coinbase\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockDifficulty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"difficulty\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockGasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gaslimit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getEthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastBlockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"requireSuccess\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"tryAggregate\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"requireSuccess\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"tryBlockAndAggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall2.Result[]\",\"name\":\"returnData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Michael Elliot <mike@makerdao.com>Joshua Levine <joshua@makerdao.com>Nick Johnson <arachnid@notdot.net>\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Multicall2 - Aggregate results from multiple read-only function calls\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Multicall2.sol\":\"Multicall2\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Multicall2.sol\":{\"content\":\"/**\\n *Submitted for verification at Etherscan.io on 2021-04-29\\n */\\n\\n/**\\n *Submitted for verification at Etherscan.io on 2021-03-23\\n */\\n\\npragma solidity >=0.5.0;\\npragma experimental ABIEncoderV2;\\n\\n/// @title Multicall2 - Aggregate results from multiple read-only function calls\\n/// @author Michael Elliot <mike@makerdao.com>\\n/// @author Joshua Levine <joshua@makerdao.com>\\n/// @author Nick Johnson <arachnid@notdot.net>\\n\\ncontract Multicall2 {\\n    struct Call {\\n        address target;\\n        bytes callData;\\n    }\\n    struct Result {\\n        bool success;\\n        bytes returnData;\\n    }\\n\\n    function aggregate(Call[] memory calls)\\n        public\\n        returns (uint256 blockNumber, bytes[] memory returnData)\\n    {\\n        blockNumber = block.number;\\n        returnData = new bytes[](calls.length);\\n        for (uint256 i = 0; i < calls.length; i++) {\\n            (bool success, bytes memory ret) = calls[i].target.call(\\n                calls[i].callData\\n            );\\n            require(success, 'Multicall aggregate: call failed');\\n            returnData[i] = ret;\\n        }\\n    }\\n\\n    function blockAndAggregate(Call[] memory calls)\\n        public\\n        returns (\\n            uint256 blockNumber,\\n            bytes32 blockHash,\\n            Result[] memory returnData\\n        )\\n    {\\n        (blockNumber, blockHash, returnData) = tryBlockAndAggregate(\\n            true,\\n            calls\\n        );\\n    }\\n\\n    function getBlockHash(uint256 blockNumber)\\n        public\\n        view\\n        returns (bytes32 blockHash)\\n    {\\n        blockHash = blockhash(blockNumber);\\n    }\\n\\n    function getBlockNumber() public view returns (uint256 blockNumber) {\\n        blockNumber = block.number;\\n    }\\n\\n    function getCurrentBlockCoinbase() public view returns (address coinbase) {\\n        coinbase = block.coinbase;\\n    }\\n\\n    function getCurrentBlockDifficulty()\\n        public\\n        view\\n        returns (uint256 difficulty)\\n    {\\n        difficulty = block.difficulty;\\n    }\\n\\n    function getCurrentBlockGasLimit() public view returns (uint256 gaslimit) {\\n        gaslimit = block.gaslimit;\\n    }\\n\\n    function getCurrentBlockTimestamp()\\n        public\\n        view\\n        returns (uint256 timestamp)\\n    {\\n        timestamp = block.timestamp;\\n    }\\n\\n    function getEthBalance(address addr) public view returns (uint256 balance) {\\n        balance = addr.balance;\\n    }\\n\\n    function getLastBlockHash() public view returns (bytes32 blockHash) {\\n        blockHash = blockhash(block.number - 1);\\n    }\\n\\n    function tryAggregate(bool requireSuccess, Call[] memory calls)\\n        public\\n        returns (Result[] memory returnData)\\n    {\\n        returnData = new Result[](calls.length);\\n        for (uint256 i = 0; i < calls.length; i++) {\\n            (bool success, bytes memory ret) = calls[i].target.call(\\n                calls[i].callData\\n            );\\n\\n            if (requireSuccess) {\\n                require(success, 'Multicall2 aggregate: call failed');\\n            }\\n\\n            returnData[i] = Result(success, ret);\\n        }\\n    }\\n\\n    function tryBlockAndAggregate(bool requireSuccess, Call[] memory calls)\\n        public\\n        returns (\\n            uint256 blockNumber,\\n            bytes32 blockHash,\\n            Result[] memory returnData\\n        )\\n    {\\n        blockNumber = block.number;\\n        blockHash = blockhash(block.number);\\n        returnData = tryAggregate(requireSuccess, calls);\\n    }\\n}\\n\",\"keccak256\":\"0xf75640d6a912827f1f5804c983354990f6404dd07272e7b540523f4d5fbf3dfc\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061119f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806372425d9d1161007157806372425d9d146101a657806386d516e8146101c4578063a8b0574e146101e2578063bce38bd714610200578063c3077fa914610230578063ee82ac5e14610262576100b4565b80630f28c97d146100b9578063252dba42146100d757806327e86d6e14610108578063399542e91461012657806342cbb15c146101585780634d2301cc14610176575b600080fd5b6100c1610292565b6040516100ce9190610d46565b60405180910390f35b6100f160048036038101906100ec919061099e565b61029a565b6040516100ff929190610d61565b60405180910390f35b6101106104bb565b60405161011d9190610ceb565b60405180910390f35b610140600480360381019061013b91906109df565b6104d0565b60405161014f93929190610d91565b60405180910390f35b6101606104ef565b60405161016d9190610d46565b60405180910390f35b610190600480360381019061018b9190610975565b6104f7565b60405161019d9190610d46565b60405180910390f35b6101ae610518565b6040516101bb9190610d46565b60405180910390f35b6101cc610520565b6040516101d99190610d46565b60405180910390f35b6101ea610528565b6040516101f79190610cae565b60405180910390f35b61021a600480360381019061021591906109df565b610530565b6040516102279190610cc9565b60405180910390f35b61024a6004803603810190610245919061099e565b610770565b60405161025993929190610d91565b60405180910390f35b61027c60048036038101906102779190610a33565b610793565b6040516102899190610ceb565b60405180910390f35b600042905090565b60006060439150825167ffffffffffffffff8111156102e2577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561031557816020015b60608152602001906001900390816103005790505b50905060005b83518110156104b557600080858381518110610360577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff168684815181106103bb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151602001516040516103d49190610c97565b6000604051808303816000865af19150503d8060008114610411576040519150601f19603f3d011682016040523d82523d6000602084013e610416565b606091505b50915091508161045b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045290610d26565b60405180910390fd5b80848481518110610495577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181905250505080806104ad90610ff4565b91505061031b565b50915091565b60006001436104ca9190610efb565b40905090565b6000806060439250434091506104e68585610530565b90509250925092565b600043905090565b60008173ffffffffffffffffffffffffffffffffffffffff16319050919050565b600044905090565b600045905090565b600041905090565b6060815167ffffffffffffffff811115610573577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156105ac57816020015b61059961079e565b8152602001906001900390816105915790505b50905060005b8251811015610769576000808483815181106105f7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff16858481518110610652577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516020015160405161066b9190610c97565b6000604051808303816000865af19150503d80600081146106a8576040519150601f19603f3d011682016040523d82523d6000602084013e6106ad565b606091505b509150915085156106f957816106f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ef90610d06565b60405180910390fd5b5b6040518060400160405280831515815260200182815250848481518110610749577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052505050808061076190610ff4565b9150506105b2565b5092915050565b60008060606107806001856104d0565b8093508194508295505050509193909250565b600081409050919050565b6040518060400160405280600015158152602001606081525090565b60006107cd6107c884610df4565b610dcf565b905080838252602082019050828560208602820111156107ec57600080fd5b60005b8581101561083657813567ffffffffffffffff81111561080e57600080fd5b80860161081b89826108fc565b855260208501945060208401935050506001810190506107ef565b5050509392505050565b600061085361084e84610e20565b610dcf565b90508281526020810184848401111561086b57600080fd5b610876848285610f81565b509392505050565b60008135905061088d81611124565b92915050565b600082601f8301126108a457600080fd5b81356108b48482602086016107ba565b91505092915050565b6000813590506108cc8161113b565b92915050565b600082601f8301126108e357600080fd5b81356108f3848260208601610840565b91505092915050565b60006040828403121561090e57600080fd5b6109186040610dcf565b905060006109288482850161087e565b600083015250602082013567ffffffffffffffff81111561094857600080fd5b610954848285016108d2565b60208301525092915050565b60008135905061096f81611152565b92915050565b60006020828403121561098757600080fd5b60006109958482850161087e565b91505092915050565b6000602082840312156109b057600080fd5b600082013567ffffffffffffffff8111156109ca57600080fd5b6109d684828501610893565b91505092915050565b600080604083850312156109f257600080fd5b6000610a00858286016108bd565b925050602083013567ffffffffffffffff811115610a1d57600080fd5b610a2985828601610893565b9150509250929050565b600060208284031215610a4557600080fd5b6000610a5384828501610960565b91505092915050565b6000610a688383610b9b565b905092915050565b6000610a7c8383610c4b565b905092915050565b610a8d81610f2f565b82525050565b6000610a9e82610e71565b610aa88185610eac565b935083602082028501610aba85610e51565b8060005b85811015610af65784840389528151610ad78582610a5c565b9450610ae283610e92565b925060208a01995050600181019050610abe565b50829750879550505050505092915050565b6000610b1382610e7c565b610b1d8185610ebd565b935083602082028501610b2f85610e61565b8060005b85811015610b6b5784840389528151610b4c8582610a70565b9450610b5783610e9f565b925060208a01995050600181019050610b33565b50829750879550505050505092915050565b610b8681610f41565b82525050565b610b9581610f4d565b82525050565b6000610ba682610e87565b610bb08185610ece565b9350610bc0818560208601610f90565b610bc98161109b565b840191505092915050565b6000610bdf82610e87565b610be98185610edf565b9350610bf9818560208601610f90565b80840191505092915050565b6000610c12602183610eea565b9150610c1d826110ac565b604082019050919050565b6000610c35602083610eea565b9150610c40826110fb565b602082019050919050565b6000604083016000830151610c636000860182610b7d565b5060208301518482036020860152610c7b8282610b9b565b9150508091505092915050565b610c9181610f77565b82525050565b6000610ca38284610bd4565b915081905092915050565b6000602082019050610cc36000830184610a84565b92915050565b60006020820190508181036000830152610ce38184610b08565b905092915050565b6000602082019050610d006000830184610b8c565b92915050565b60006020820190508181036000830152610d1f81610c05565b9050919050565b60006020820190508181036000830152610d3f81610c28565b9050919050565b6000602082019050610d5b6000830184610c88565b92915050565b6000604082019050610d766000830185610c88565b8181036020830152610d888184610a93565b90509392505050565b6000606082019050610da66000830186610c88565b610db36020830185610b8c565b8181036040830152610dc58184610b08565b9050949350505050565b6000610dd9610dea565b9050610de58282610fc3565b919050565b6000604051905090565b600067ffffffffffffffff821115610e0f57610e0e61106c565b5b602082029050602081019050919050565b600067ffffffffffffffff821115610e3b57610e3a61106c565b5b610e448261109b565b9050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000610f0682610f77565b9150610f1183610f77565b925082821015610f2457610f2361103d565b5b828203905092915050565b6000610f3a82610f57565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015610fae578082015181840152602081019050610f93565b83811115610fbd576000848401525b50505050565b610fcc8261109b565b810181811067ffffffffffffffff82111715610feb57610fea61106c565b5b80604052505050565b6000610fff82610f77565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156110325761103161103d565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4d756c746963616c6c32206167677265676174653a2063616c6c206661696c6560008201527f6400000000000000000000000000000000000000000000000000000000000000602082015250565b7f4d756c746963616c6c206167677265676174653a2063616c6c206661696c6564600082015250565b61112d81610f2f565b811461113857600080fd5b50565b61114481610f41565b811461114f57600080fd5b50565b61115b81610f77565b811461116657600080fd5b5056fea264697066735822122071b07e83bba1293958e1f2403ea0220a22b23ae13ff8d0be422bb79ab86b381664736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c806372425d9d1161007157806372425d9d146101a657806386d516e8146101c4578063a8b0574e146101e2578063bce38bd714610200578063c3077fa914610230578063ee82ac5e14610262576100b4565b80630f28c97d146100b9578063252dba42146100d757806327e86d6e14610108578063399542e91461012657806342cbb15c146101585780634d2301cc14610176575b600080fd5b6100c1610292565b6040516100ce9190610d46565b60405180910390f35b6100f160048036038101906100ec919061099e565b61029a565b6040516100ff929190610d61565b60405180910390f35b6101106104bb565b60405161011d9190610ceb565b60405180910390f35b610140600480360381019061013b91906109df565b6104d0565b60405161014f93929190610d91565b60405180910390f35b6101606104ef565b60405161016d9190610d46565b60405180910390f35b610190600480360381019061018b9190610975565b6104f7565b60405161019d9190610d46565b60405180910390f35b6101ae610518565b6040516101bb9190610d46565b60405180910390f35b6101cc610520565b6040516101d99190610d46565b60405180910390f35b6101ea610528565b6040516101f79190610cae565b60405180910390f35b61021a600480360381019061021591906109df565b610530565b6040516102279190610cc9565b60405180910390f35b61024a6004803603810190610245919061099e565b610770565b60405161025993929190610d91565b60405180910390f35b61027c60048036038101906102779190610a33565b610793565b6040516102899190610ceb565b60405180910390f35b600042905090565b60006060439150825167ffffffffffffffff8111156102e2577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561031557816020015b60608152602001906001900390816103005790505b50905060005b83518110156104b557600080858381518110610360577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff168684815181106103bb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151602001516040516103d49190610c97565b6000604051808303816000865af19150503d8060008114610411576040519150601f19603f3d011682016040523d82523d6000602084013e610416565b606091505b50915091508161045b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045290610d26565b60405180910390fd5b80848481518110610495577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181905250505080806104ad90610ff4565b91505061031b565b50915091565b60006001436104ca9190610efb565b40905090565b6000806060439250434091506104e68585610530565b90509250925092565b600043905090565b60008173ffffffffffffffffffffffffffffffffffffffff16319050919050565b600044905090565b600045905090565b600041905090565b6060815167ffffffffffffffff811115610573577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156105ac57816020015b61059961079e565b8152602001906001900390816105915790505b50905060005b8251811015610769576000808483815181106105f7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff16858481518110610652577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516020015160405161066b9190610c97565b6000604051808303816000865af19150503d80600081146106a8576040519150601f19603f3d011682016040523d82523d6000602084013e6106ad565b606091505b509150915085156106f957816106f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ef90610d06565b60405180910390fd5b5b6040518060400160405280831515815260200182815250848481518110610749577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052505050808061076190610ff4565b9150506105b2565b5092915050565b60008060606107806001856104d0565b8093508194508295505050509193909250565b600081409050919050565b6040518060400160405280600015158152602001606081525090565b60006107cd6107c884610df4565b610dcf565b905080838252602082019050828560208602820111156107ec57600080fd5b60005b8581101561083657813567ffffffffffffffff81111561080e57600080fd5b80860161081b89826108fc565b855260208501945060208401935050506001810190506107ef565b5050509392505050565b600061085361084e84610e20565b610dcf565b90508281526020810184848401111561086b57600080fd5b610876848285610f81565b509392505050565b60008135905061088d81611124565b92915050565b600082601f8301126108a457600080fd5b81356108b48482602086016107ba565b91505092915050565b6000813590506108cc8161113b565b92915050565b600082601f8301126108e357600080fd5b81356108f3848260208601610840565b91505092915050565b60006040828403121561090e57600080fd5b6109186040610dcf565b905060006109288482850161087e565b600083015250602082013567ffffffffffffffff81111561094857600080fd5b610954848285016108d2565b60208301525092915050565b60008135905061096f81611152565b92915050565b60006020828403121561098757600080fd5b60006109958482850161087e565b91505092915050565b6000602082840312156109b057600080fd5b600082013567ffffffffffffffff8111156109ca57600080fd5b6109d684828501610893565b91505092915050565b600080604083850312156109f257600080fd5b6000610a00858286016108bd565b925050602083013567ffffffffffffffff811115610a1d57600080fd5b610a2985828601610893565b9150509250929050565b600060208284031215610a4557600080fd5b6000610a5384828501610960565b91505092915050565b6000610a688383610b9b565b905092915050565b6000610a7c8383610c4b565b905092915050565b610a8d81610f2f565b82525050565b6000610a9e82610e71565b610aa88185610eac565b935083602082028501610aba85610e51565b8060005b85811015610af65784840389528151610ad78582610a5c565b9450610ae283610e92565b925060208a01995050600181019050610abe565b50829750879550505050505092915050565b6000610b1382610e7c565b610b1d8185610ebd565b935083602082028501610b2f85610e61565b8060005b85811015610b6b5784840389528151610b4c8582610a70565b9450610b5783610e9f565b925060208a01995050600181019050610b33565b50829750879550505050505092915050565b610b8681610f41565b82525050565b610b9581610f4d565b82525050565b6000610ba682610e87565b610bb08185610ece565b9350610bc0818560208601610f90565b610bc98161109b565b840191505092915050565b6000610bdf82610e87565b610be98185610edf565b9350610bf9818560208601610f90565b80840191505092915050565b6000610c12602183610eea565b9150610c1d826110ac565b604082019050919050565b6000610c35602083610eea565b9150610c40826110fb565b602082019050919050565b6000604083016000830151610c636000860182610b7d565b5060208301518482036020860152610c7b8282610b9b565b9150508091505092915050565b610c9181610f77565b82525050565b6000610ca38284610bd4565b915081905092915050565b6000602082019050610cc36000830184610a84565b92915050565b60006020820190508181036000830152610ce38184610b08565b905092915050565b6000602082019050610d006000830184610b8c565b92915050565b60006020820190508181036000830152610d1f81610c05565b9050919050565b60006020820190508181036000830152610d3f81610c28565b9050919050565b6000602082019050610d5b6000830184610c88565b92915050565b6000604082019050610d766000830185610c88565b8181036020830152610d888184610a93565b90509392505050565b6000606082019050610da66000830186610c88565b610db36020830185610b8c565b8181036040830152610dc58184610b08565b9050949350505050565b6000610dd9610dea565b9050610de58282610fc3565b919050565b6000604051905090565b600067ffffffffffffffff821115610e0f57610e0e61106c565b5b602082029050602081019050919050565b600067ffffffffffffffff821115610e3b57610e3a61106c565b5b610e448261109b565b9050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000610f0682610f77565b9150610f1183610f77565b925082821015610f2457610f2361103d565b5b828203905092915050565b6000610f3a82610f57565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015610fae578082015181840152602081019050610f93565b83811115610fbd576000848401525b50505050565b610fcc8261109b565b810181811067ffffffffffffffff82111715610feb57610fea61106c565b5b80604052505050565b6000610fff82610f77565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156110325761103161103d565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4d756c746963616c6c32206167677265676174653a2063616c6c206661696c6560008201527f6400000000000000000000000000000000000000000000000000000000000000602082015250565b7f4d756c746963616c6c206167677265676174653a2063616c6c206661696c6564600082015250565b61112d81610f2f565b811461113857600080fd5b50565b61114481610f41565b811461114f57600080fd5b50565b61115b81610f77565b811461116657600080fd5b5056fea264697066735822122071b07e83bba1293958e1f2403ea0220a22b23ae13ff8d0be422bb79ab86b381664736f6c63430008040033",
  "devdoc": {
    "author": "Michael Elliot <mike@makerdao.com>Joshua Levine <joshua@makerdao.com>Nick Johnson <arachnid@notdot.net>",
    "kind": "dev",
    "methods": {},
    "title": "Multicall2 - Aggregate results from multiple read-only function calls",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}