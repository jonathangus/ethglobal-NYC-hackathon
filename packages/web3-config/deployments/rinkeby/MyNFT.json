{
  "address": "0x9AA48Bb538206d5D7329aafd17B63562e7c98457",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "data",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "StepCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stepId",
          "type": "uint256"
        }
      ],
      "name": "StepExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "abort",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "apeIsSent",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "claimAbort",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stepId",
          "type": "uint256"
        }
      ],
      "name": "executeStep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governanceIsApproved",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "helpKoalas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintedComplete",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reverted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "sendApe",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setGovernanceApproved",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "steps",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "data",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "completed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfc21d10b13dff47cc7d7487902dd58338be98b2a971f27f88a21316f2078bdbd",
  "receipt": {
    "to": null,
    "from": "0xA4B7CEe8409673624EC9B075f5A4f9b8EbAdEd49",
    "contractAddress": "0x9AA48Bb538206d5D7329aafd17B63562e7c98457",
    "transactionIndex": 12,
    "gasUsed": "4030932",
    "logsBloom": "0x
    "blockHash": "0xfd1080407280337c1a73464c76e0b1bfcc8cfe5c7e12b2739de3aca66e86586b",
    "transactionHash": "0xfc21d10b13dff47cc7d7487902dd58338be98b2a971f27f88a21316f2078bdbd",
    "logs": [
      {
        "transactionIndex": 12,
        "blockNumber": 10914297,
        "transactionHash": "0xfc21d10b13dff47cc7d7487902dd58338be98b2a971f27f88a21316f2078bdbd",
        "address": "0x9AA48Bb538206d5D7329aafd17B63562e7c98457",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a4b7cee8409673624ec9b075f5a4f9b8ebaded49"
        ],
        "data": "0x",
        "logIndex": 27,
        "blockHash": "0xfd1080407280337c1a73464c76e0b1bfcc8cfe5c7e12b2739de3aca66e86586b"
      },
      {
        "transactionIndex": 12,
        "blockNumber": 10914297,
        "transactionHash": "0xfc21d10b13dff47cc7d7487902dd58338be98b2a971f27f88a21316f2078bdbd",
        "address": "0x9AA48Bb538206d5D7329aafd17B63562e7c98457",
        "topics": [
          "0xca729272cde0dd3fe1a318c7526cdb798b16b524780aacd4fe24b04c87954fd4"
        ],
        "data": "0x16e3c74988dba8a59bcfa0f4f3e1ae02da7e9741bd6cbb0f669d961aab616d0700000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000013476f7665726e616e636520617070726f76616c00000000000000000000000000",
        "logIndex": 28,
        "blockHash": "0xfd1080407280337c1a73464c76e0b1bfcc8cfe5c7e12b2739de3aca66e86586b"
      },
      {
        "transactionIndex": 12,
        "blockNumber": 10914297,
        "transactionHash": "0xfc21d10b13dff47cc7d7487902dd58338be98b2a971f27f88a21316f2078bdbd",
        "address": "0x9AA48Bb538206d5D7329aafd17B63562e7c98457",
        "topics": [
          "0xca729272cde0dd3fe1a318c7526cdb798b16b524780aacd4fe24b04c87954fd4"
        ],
        "data": "0xfb1886505822f9be24f74d341b8c03d453decdae5e67aa5fb229c1e3cc1d8d04000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000114d696e74696e6720636f6d706c65746564000000000000000000000000000000",
        "logIndex": 29,
        "blockHash": "0xfd1080407280337c1a73464c76e0b1bfcc8cfe5c7e12b2739de3aca66e86586b"
      },
      {
        "transactionIndex": 12,
        "blockNumber": 10914297,
        "transactionHash": "0xfc21d10b13dff47cc7d7487902dd58338be98b2a971f27f88a21316f2078bdbd",
        "address": "0x9AA48Bb538206d5D7329aafd17B63562e7c98457",
        "topics": [
          "0xca729272cde0dd3fe1a318c7526cdb798b16b524780aacd4fe24b04c87954fd4"
        ],
        "data": "0x637eb40bc38b3d2cc881978a9bb816eebab752b9e9bf1656531e091149ec393000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000011424159432073656e7420746f2075736572000000000000000000000000000000",
        "logIndex": 30,
        "blockHash": "0xfd1080407280337c1a73464c76e0b1bfcc8cfe5c7e12b2739de3aca66e86586b"
      },
      {
        "transactionIndex": 12,
        "blockNumber": 10914297,
        "transactionHash": "0xfc21d10b13dff47cc7d7487902dd58338be98b2a971f27f88a21316f2078bdbd",
        "address": "0x9AA48Bb538206d5D7329aafd17B63562e7c98457",
        "topics": [
          "0xca729272cde0dd3fe1a318c7526cdb798b16b524780aacd4fe24b04c87954fd4"
        ],
        "data": "0x9aaa65d9a64b82e219c15f8793d1b7d4fa32b558938f23a4833142a3da74c8e20000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000c436861726974792073656e740000000000000000000000000000000000000000",
        "logIndex": 31,
        "blockHash": "0xfd1080407280337c1a73464c76e0b1bfcc8cfe5c7e12b2739de3aca66e86586b"
      }
    ],
    "blockNumber": 10914297,
    "cumulativeGasUsed": "7029985",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "2fbab61d983df779177d1bb40022c90d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"StepCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stepId\",\"type\":\"uint256\"}],\"name\":\"StepExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"abort\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apeIsSent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"claimAbort\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stepId\",\"type\":\"uint256\"}],\"name\":\"executeStep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governanceIsApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"helpKoalas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintedComplete\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reverted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"sendApe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setGovernanceApproved\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"steps\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"completed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MyNFT.sol\":\"MyNFT\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x11b84bb56dc112a6590bfe3e0efa118aa1b5891132342200d04c4ef544cb93de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x0a79511df8151b10b0a0004d6a76ad956582d32824af4c0f4886bdbdfe5746e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/MyNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '@openzeppelin/contracts/token/ERC721/ERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol';\\nimport '@openzeppelin/contracts/utils/Counters.sol';\\nimport './Roadmap.sol';\\n\\ncontract MyNFT is ERC721, ERC721Enumerable, Ownable, Roadmap {\\n    using Counters for Counters.Counter;\\n\\n    uint256 RESERVED_TREASURY_AMOUNT = 3 ether;\\n    bool apeSent = false;\\n    bool koalasSent = false;\\n    bool governanceApproved = false;\\n\\n    Counters.Counter private _tokenIdCounter;\\n\\n    constructor() ERC721('MyToken', 'MTK') Roadmap(RESERVED_TREASURY_AMOUNT) {\\n        addStep('governanceIsApproved()', 'Governance approval');\\n        addStep('mintedComplete()', 'Minting completed');\\n        addStep('apeIsSent()', 'BAYC sent to user');\\n        addStep('koalasSent()', 'Charity sent');\\n    }\\n\\n    function mintedComplete() public view returns (bool) {\\n        return true;\\n        // return totalSupply() == 1000;\\n    }\\n\\n    function setGovernanceApproved() public {\\n        // validate sender\\n        governanceApproved = true;\\n    }\\n\\n    function governanceIsApproved() public view returns (bool) {\\n        return governanceApproved;\\n    }\\n\\n    function apeIsSent() public view returns (bool) {\\n        return apeSent;\\n    }\\n\\n    function sendApe(address newOwner) public onlyOwner {\\n        // IERC721.transfer(0, newOwner)\\n        apeSent = true;\\n    }\\n\\n    function helpKoalas() public onlyOwner {\\n        // transfer(1 ether, KOALA_ADDRESS);\\n        koalasSent = true;\\n    }\\n\\n    function mint() public {\\n        uint256 tokenId = _tokenIdCounter.current();\\n        _tokenIdCounter.increment();\\n        _safeMint(msg.sender, tokenId);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal override(ERC721, ERC721Enumerable) {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC721, ERC721Enumerable)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x70fa02ed909bba8bef78ff260dc280e6ee627b89a79e53cbe70c1bda4cd5d708\",\"license\":\"MIT\"},\"contracts/Roadmap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\n\\ncontract Roadmap is Ownable {\\n    bool public reverted = false;\\n    uint256 private reservedAmount;\\n\\n    struct Step {\\n        bytes32 data;\\n        string message;\\n        bool completed;\\n    }\\n\\n    event StepCreated(bytes32 data, string message);\\n    event StepExecuted(uint256 stepId);\\n\\n    Step[] public steps;\\n\\n    constructor(uint256 _reservedAmount) {\\n        reservedAmount = _reservedAmount;\\n    }\\n\\n    function addStep(string memory call, string memory message) internal {\\n        bytes32 data = bytes32(keccak256(abi.encodePacked(call)));\\n        steps.push(Step(data, message, false));\\n        emit StepCreated(data, message);\\n    }\\n\\n    function abort() external onlyOwner {\\n        reverted = true;\\n    }\\n\\n    function executeStep(uint256 stepId) public {\\n        //check if passed\\n        Step memory step = steps[stepId];\\n\\n        (bool success, bytes memory ret) = address(this).call(\\n            abi.encodePacked(step.data)\\n        );\\n\\n        bool result;\\n        assembly {\\n            // Load the length of data (first 32 bytes)\\n            let len := mload(ret)\\n            // Load the data after 32 bytes, so add 0x20\\n            result := mload(add(ret, 0x20))\\n        }\\n\\n        if (!success) {\\n            require(success, 'call not successful');\\n        }\\n\\n        if (!result) {\\n            require(result, 'result not successful');\\n        }\\n\\n        // if(step.claimed) {\\n        //     // revert\\n        // }\\n        // if(step.StepTypes == )\\n\\n        steps[stepId].completed = true;\\n        emit StepExecuted(stepId);\\n    }\\n\\n    function claimAbort(uint256[] memory tokenIds) external {\\n        require(reverted, 'Reverted not active');\\n\\n        uint256 refund = 0;\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            IERC721(address(this)).safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                tokenIds[i]\\n            );\\n            refund += 10000;\\n        }\\n    }\\n\\n    function withdrawFunds() external onlyOwner {\\n        for (uint256 i = 0; i < steps.length; i++) {\\n            require(steps[i].completed, 'Not completed');\\n        }\\n\\n        uint256 balance = address(this).balance;\\n        payable(msg.sender).transfer(balance);\\n    }\\n}\\n\",\"keccak256\":\"0xd2b6763f00a17ece3e667cd65bcb119b88eed99387030bf995d9261f2964a26e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526000600a60146101000a81548160ff0219169083151502179055506729a2241af62c0000600d556000600e60006101000a81548160ff0219169083151502179055506000600e60016101000a81548160ff0219169083151502179055506000600e60026101000a81548160ff0219169083151502179055503480156200008957600080fd5b50600d546040518060400160405280600781526020017f4d79546f6b656e000000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f4d544b00000000000000000000000000000000000000000000000000000000008152508160009080519060200190620001119291906200051a565b5080600190805190602001906200012a9291906200051a565b5050506200014d620001416200034b60201b60201c565b6200035360201b60201c565b80600b8190555050620001d16040518060400160405280601681526020017f676f7665726e616e63654973417070726f7665642829000000000000000000008152506040518060400160405280601381526020017f476f7665726e616e636520617070726f76616c000000000000000000000000008152506200041960201b60201c565b6200024d6040518060400160405280601081526020017f6d696e746564436f6d706c6574652829000000000000000000000000000000008152506040518060400160405280601181526020017f4d696e74696e6720636f6d706c657465640000000000000000000000000000008152506200041960201b60201c565b620002c96040518060400160405280600b81526020017f617065497353656e7428290000000000000000000000000000000000000000008152506040518060400160405280601181526020017f424159432073656e7420746f20757365720000000000000000000000000000008152506200041960201b60201c565b620003456040518060400160405280600c81526020017f6b6f616c617353656e74282900000000000000000000000000000000000000008152506040518060400160405280600c81526020017f436861726974792073656e7400000000000000000000000000000000000000008152506200041960201b60201c565b6200077d565b600033905090565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000826040516020016200042e919062000653565b604051602081830303815290604052805190602001209050600c6040518060600160405280838152602001848152602001600015158152509080600181540180825580915050600190039060005260206000209060030201600090919091909150600082015181600001556020820151816001019080519060200190620004b79291906200051a565b5060408201518160020160006101000a81548160ff02191690831515021790555050507fca729272cde0dd3fe1a318c7526cdb798b16b524780aacd4fe24b04c87954fd481836040516200050d9291906200066c565b60405180910390a1505050565b828054620005289062000707565b90600052602060002090601f0160209004810192826200054c576000855562000598565b82601f106200056757805160ff191683800117855562000598565b8280016001018555821562000598579182015b82811115620005975782518255916020019190600101906200057a565b5b509050620005a79190620005ab565b5090565b5b80821115620005c6576000816000905550600101620005ac565b5090565b620005d581620006c7565b82525050565b6000620005e882620006a0565b620005f48185620006ab565b935062000606818560208601620006d1565b62000611816200076c565b840191505092915050565b60006200062982620006a0565b620006358185620006bc565b935062000647818560208601620006d1565b80840191505092915050565b60006200066182846200061c565b915081905092915050565b6000604082019050620006836000830185620005ca565b8181036020830152620006978184620005db565b90509392505050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000819050919050565b60005b83811015620006f1578082015181840152602081019050620006d4565b8381111562000701576000848401525b50505050565b600060028204905060018216806200072057607f821691505b602082108114156200073757620007366200073d565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b6141b7806200078d6000396000f3fe608060405234801561001057600080fd5b50600436106101f05760003560e01c80636352211e1161010f57806395d89b41116100a2578063c87b56dd11610071578063c87b56dd14610535578063e985e9c514610565578063f2fde38b14610595578063fb188650146105b1576101f0565b806395d89b41146104c1578063a22cb465146104df578063b88d4fde146104fb578063bc0af82a14610517576101f0565b80637217e0b9116100de5780637217e0b91461043957806378ebce481461046b578063867fc17a146104875780638da5cb5b146104a3576101f0565b80636352211e146103b1578063637eb40b146103e157806370a08231146103ff578063715018a61461042f576101f0565b806323b872dd1161018757806342842e0e1161015657806342842e0e1461033f5780634cd020d91461035b5780634f6ccce71461036557806352aa050714610395576101f0565b806323b872dd146102df57806324600fc3146102fb5780632f745c591461030557806335a063b414610335576101f0565b80631249c58b116101c35780631249c58b1461028f57806316e3c7491461029957806318160ddd146102b75780631920f712146102d5576101f0565b806301ffc9a7146101f557806306fdde0314610225578063081812fc14610243578063095ea7b314610273575b600080fd5b61020f600480360381019061020a9190612e9e565b6105cf565b60405161021c9190613436565b60405180910390f35b61022d6105e1565b60405161023a919061348f565b60405180910390f35b61025d60048036038101906102589190612ef0565b610673565b60405161026a9190613398565b60405180910390f35b61028d60048036038101906102889190612e21565b6106f8565b005b610297610810565b005b6102a1610835565b6040516102ae9190613436565b60405180910390f35b6102bf61084c565b6040516102cc9190613771565b60405180910390f35b6102dd610859565b005b6102f960048036038101906102f49190612d1b565b610876565b005b6103036108d6565b005b61031f600480360381019061031a9190612e21565b610a5d565b60405161032c9190613771565b60405180910390f35b61033d610b02565b005b61035960048036038101906103549190612d1b565b610b9b565b005b610363610bbb565b005b61037f600480360381019061037a9190612ef0565b610c54565b60405161038c9190613771565b60405180910390f35b6103af60048036038101906103aa9190612e5d565b610ceb565b005b6103cb60048036038101906103c69190612ef0565b610e1e565b6040516103d89190613398565b60405180910390f35b6103e9610ed0565b6040516103f69190613436565b60405180910390f35b61041960048036038101906104149190612cb6565b610ee7565b6040516104269190613771565b60405180910390f35b610437610f9f565b005b610453600480360381019061044e9190612ef0565b611027565b60405161046293929190613451565b60405180910390f35b61048560048036038101906104809190612cb6565b6110f6565b005b6104a1600480360381019061049c9190612ef0565b611190565b005b6104ab61146a565b6040516104b89190613398565b60405180910390f35b6104c9611494565b6040516104d6919061348f565b60405180910390f35b6104f960048036038101906104f49190612de5565b611526565b005b61051560048036038101906105109190612d6a565b61153c565b005b61051f61159e565b60405161052c9190613436565b60405180910390f35b61054f600480360381019061054a9190612ef0565b6115b1565b60405161055c919061348f565b60405180910390f35b61057f600480360381019061057a9190612cdf565b611658565b60405161058c9190613436565b60405180910390f35b6105af60048036038101906105aa9190612cb6565b6116ec565b005b6105b96117e4565b6040516105c69190613436565b60405180910390f35b60006105da826117ed565b9050919050565b6060600080546105f0906139d7565b80601f016020809104026020016040519081016040528092919081815260200182805461061c906139d7565b80156106695780601f1061063e57610100808354040283529160200191610669565b820191906000526020600020905b81548152906001019060200180831161064c57829003601f168201915b5050505050905090565b600061067e82611867565b6106bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b490613671565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061070382610e1e565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610774576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076b906136f1565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166107936118d3565b73ffffffffffffffffffffffffffffffffffffffff1614806107c257506107c1816107bc6118d3565b611658565b5b610801576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f8906135f1565b60405180910390fd5b61080b83836118db565b505050565b600061081c600f611994565b9050610828600f6119a2565b61083233826119b8565b50565b6000600e60029054906101000a900460ff16905090565b6000600880549050905090565b6001600e60026101000a81548160ff021916908315150217905550565b6108876108816118d3565b826119d6565b6108c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108bd90613711565b60405180910390fd5b6108d1838383611ab4565b505050565b6108de6118d3565b73ffffffffffffffffffffffffffffffffffffffff166108fc61146a565b73ffffffffffffffffffffffffffffffffffffffff1614610952576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610949906136b1565b60405180910390fd5b60005b600c80549050811015610a0d57600c818154811061099c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906003020160020160009054906101000a900460ff166109fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f190613691565b60405180910390fd5b8080610a0590613a3a565b915050610955565b5060004790503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610a59573d6000803e3d6000fd5b5050565b6000610a6883610ee7565b8210610aa9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa0906134d1565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b610b0a6118d3565b73ffffffffffffffffffffffffffffffffffffffff16610b2861146a565b73ffffffffffffffffffffffffffffffffffffffff1614610b7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b75906136b1565b60405180910390fd5b6001600a60146101000a81548160ff021916908315150217905550565b610bb68383836040518060200160405280600081525061153c565b505050565b610bc36118d3565b73ffffffffffffffffffffffffffffffffffffffff16610be161146a565b73ffffffffffffffffffffffffffffffffffffffff1614610c37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2e906136b1565b60405180910390fd5b6001600e60016101000a81548160ff021916908315150217905550565b6000610c5e61084c565b8210610c9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9690613731565b60405180910390fd5b60088281548110610cd9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001549050919050565b600a60149054906101000a900460ff16610d3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3190613511565b60405180910390fd5b6000805b8251811015610e19573073ffffffffffffffffffffffffffffffffffffffff166342842e0e3330868581518110610d9e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516040518463ffffffff1660e01b8152600401610dc4939291906133b3565b600060405180830381600087803b158015610dde57600080fd5b505af1158015610df2573d6000803e3d6000fd5b5050505061271082610e04919061385c565b91508080610e1190613a3a565b915050610d3e565b505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610ec7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ebe90613631565b60405180910390fd5b80915050919050565b6000600e60009054906101000a900460ff16905090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610f58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4f90613611565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610fa76118d3565b73ffffffffffffffffffffffffffffffffffffffff16610fc561146a565b73ffffffffffffffffffffffffffffffffffffffff161461101b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611012906136b1565b60405180910390fd5b6110256000611d1b565b565b600c818154811061103757600080fd5b9060005260206000209060030201600091509050806000015490806001018054611060906139d7565b80601f016020809104026020016040519081016040528092919081815260200182805461108c906139d7565b80156110d95780601f106110ae576101008083540402835291602001916110d9565b820191906000526020600020905b8154815290600101906020018083116110bc57829003601f168201915b5050505050908060020160009054906101000a900460ff16905083565b6110fe6118d3565b73ffffffffffffffffffffffffffffffffffffffff1661111c61146a565b73ffffffffffffffffffffffffffffffffffffffff1614611172576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611169906136b1565b60405180910390fd5b6001600e60006101000a81548160ff02191690831515021790555050565b6000600c82815481106111cc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060030201604051806060016040529081600082015481526020016001820180546111ff906139d7565b80601f016020809104026020016040519081016040528092919081815260200182805461122b906139d7565b80156112785780601f1061124d57610100808354040283529160200191611278565b820191906000526020600020905b81548152906001019060200180831161125b57829003601f168201915b505050505081526020016002820160009054906101000a900460ff16151515158152505090506000803073ffffffffffffffffffffffffffffffffffffffff1683600001516040516020016112cd9190613342565b6040516020818303038152906040526040516112e9919061335d565b6000604051808303816000865af19150503d8060008114611326576040519150601f19603f3d011682016040523d82523d6000602084013e61132b565b606091505b5091509150600081516020830151915050826113825782611381576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137890613751565b60405180910390fd5b5b806113c857806113c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113be906134b1565b60405180910390fd5b5b6001600c8681548110611404577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906003020160020160006101000a81548160ff0219169083151502179055507f7d716790d01a64421d121f2b247366a43719c87528485b9900995183b635fe8a8560405161145b9190613771565b60405180910390a15050505050565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600180546114a3906139d7565b80601f01602080910402602001604051908101604052809291908181526020018280546114cf906139d7565b801561151c5780601f106114f15761010080835404028352916020019161151c565b820191906000526020600020905b8154815290600101906020018083116114ff57829003601f168201915b5050505050905090565b6115386115316118d3565b8383611de1565b5050565b61154d6115476118d3565b836119d6565b61158c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161158390613711565b60405180910390fd5b61159884848484611f4e565b50505050565b600a60149054906101000a900460ff1681565b60606115bc82611867565b6115fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115f2906136d1565b60405180910390fd5b6000611605611faa565b905060008151116116255760405180602001604052806000815250611650565b8061162f84611fc1565b604051602001611640929190613374565b6040516020818303038152906040525b915050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6116f46118d3565b73ffffffffffffffffffffffffffffffffffffffff1661171261146a565b73ffffffffffffffffffffffffffffffffffffffff1614611768576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161175f906136b1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156117d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117cf90613531565b60405180910390fd5b6117e181611d1b565b50565b60006001905090565b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611860575061185f8261216e565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661194e83610e1e565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600081600001549050919050565b6001816000016000828254019250508190555050565b6119d2828260405180602001604052806000815250612250565b5050565b60006119e182611867565b611a20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a17906135d1565b60405180910390fd5b6000611a2b83610e1e565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611a9a57508373ffffffffffffffffffffffffffffffffffffffff16611a8284610673565b73ffffffffffffffffffffffffffffffffffffffff16145b80611aab5750611aaa8185611658565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611ad482610e1e565b73ffffffffffffffffffffffffffffffffffffffff1614611b2a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b2190613551565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611b9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b9190613591565b60405180910390fd5b611ba58383836122ab565b611bb06000826118db565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611c0091906138e3565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611c57919061385c565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611d168383836122bb565b505050565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611e50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e47906135b1565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611f419190613436565b60405180910390a3505050565b611f59848484611ab4565b611f65848484846122c0565b611fa4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f9b906134f1565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b60606000821415612009576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612169565b600082905060005b6000821461203b57808061202490613a3a565b915050600a8261203491906138b2565b9150612011565b60008167ffffffffffffffff81111561207d577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156120af5781602001600182028036833780820191505090505b5090505b60008514612162576001826120c891906138e3565b9150600a856120d79190613a8d565b60306120e3919061385c565b60f81b81838151811061211f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8561215b91906138b2565b94506120b3565b8093505050505b919050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061223957507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80612249575061224882612457565b5b9050919050565b61225a83836124c1565b61226760008484846122c0565b6122a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161229d906134f1565b60405180910390fd5b505050565b6122b683838361269b565b505050565b505050565b60006122e18473ffffffffffffffffffffffffffffffffffffffff166127af565b1561244a578373ffffffffffffffffffffffffffffffffffffffff1663150b7a0261230a6118d3565b8786866040518563ffffffff1660e01b815260040161232c94939291906133ea565b602060405180830381600087803b15801561234657600080fd5b505af192505050801561237757506040513d601f19601f820116820180604052508101906123749190612ec7565b60015b6123fa573d80600081146123a7576040519150601f19603f3d011682016040523d82523d6000602084013e6123ac565b606091505b506000815114156123f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123e9906134f1565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505061244f565b600190505b949350505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612531576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161252890613651565b60405180910390fd5b61253a81611867565b1561257a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161257190613571565b60405180910390fd5b612586600083836122ab565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546125d6919061385c565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612697600083836122bb565b5050565b6126a68383836127d2565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156126e9576126e4816127d7565b612728565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614612727576127268382612820565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561276b576127668161298d565b6127aa565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146127a9576127a88282612ad0565b5b5b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b505050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505060019003906000526020600020016000909190919091505550565b6000600161282d84610ee7565b61283791906138e3565b905060006007600084815260200190815260200160002054905081811461291c576000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816007600083815260200190815260200160002081905550505b6007600084815260200190815260200160002060009055600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b600060016008805490506129a191906138e3565b90506000600960008481526020019081526020016000205490506000600883815481106129f7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020015490508060088381548110612a3f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020018190555081600960008381526020019081526020016000208190555060096000858152602001908152602001600020600090556008805480612ab4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b6000612adb83610ee7565b905081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806007600084815260200190815260200160002081905550505050565b6000612b62612b5d846137b1565b61378c565b90508083825260208201905082856020860282011115612b8157600080fd5b60005b85811015612bb15781612b978882612ca1565b845260208401935060208301925050600181019050612b84565b5050509392505050565b6000612bce612bc9846137dd565b61378c565b905082815260208101848484011115612be657600080fd5b612bf1848285613995565b509392505050565b600081359050612c0881614125565b92915050565b600082601f830112612c1f57600080fd5b8135612c2f848260208601612b4f565b91505092915050565b600081359050612c478161413c565b92915050565b600081359050612c5c81614153565b92915050565b600081519050612c7181614153565b92915050565b600082601f830112612c8857600080fd5b8135612c98848260208601612bbb565b91505092915050565b600081359050612cb08161416a565b92915050565b600060208284031215612cc857600080fd5b6000612cd684828501612bf9565b91505092915050565b60008060408385031215612cf257600080fd5b6000612d0085828601612bf9565b9250506020612d1185828601612bf9565b9150509250929050565b600080600060608486031215612d3057600080fd5b6000612d3e86828701612bf9565b9350506020612d4f86828701612bf9565b9250506040612d6086828701612ca1565b9150509250925092565b60008060008060808587031215612d8057600080fd5b6000612d8e87828801612bf9565b9450506020612d9f87828801612bf9565b9350506040612db087828801612ca1565b925050606085013567ffffffffffffffff811115612dcd57600080fd5b612dd987828801612c77565b91505092959194509250565b60008060408385031215612df857600080fd5b6000612e0685828601612bf9565b9250506020612e1785828601612c38565b9150509250929050565b60008060408385031215612e3457600080fd5b6000612e4285828601612bf9565b9250506020612e5385828601612ca1565b9150509250929050565b600060208284031215612e6f57600080fd5b600082013567ffffffffffffffff811115612e8957600080fd5b612e9584828501612c0e565b91505092915050565b600060208284031215612eb057600080fd5b6000612ebe84828501612c4d565b91505092915050565b600060208284031215612ed957600080fd5b6000612ee784828501612c62565b91505092915050565b600060208284031215612f0257600080fd5b6000612f1084828501612ca1565b91505092915050565b612f2281613917565b82525050565b612f3181613929565b82525050565b612f4081613935565b82525050565b612f57612f5282613935565b613a83565b82525050565b6000612f688261380e565b612f728185613824565b9350612f828185602086016139a4565b612f8b81613b7a565b840191505092915050565b6000612fa18261380e565b612fab8185613835565b9350612fbb8185602086016139a4565b80840191505092915050565b6000612fd282613819565b612fdc8185613840565b9350612fec8185602086016139a4565b612ff581613b7a565b840191505092915050565b600061300b82613819565b6130158185613851565b93506130258185602086016139a4565b80840191505092915050565b600061303e601583613840565b915061304982613b8b565b602082019050919050565b6000613061602b83613840565b915061306c82613bb4565b604082019050919050565b6000613084603283613840565b915061308f82613c03565b604082019050919050565b60006130a7601383613840565b91506130b282613c52565b602082019050919050565b60006130ca602683613840565b91506130d582613c7b565b604082019050919050565b60006130ed602583613840565b91506130f882613cca565b604082019050919050565b6000613110601c83613840565b915061311b82613d19565b602082019050919050565b6000613133602483613840565b915061313e82613d42565b604082019050919050565b6000613156601983613840565b915061316182613d91565b602082019050919050565b6000613179602c83613840565b915061318482613dba565b604082019050919050565b600061319c603883613840565b91506131a782613e09565b604082019050919050565b60006131bf602a83613840565b91506131ca82613e58565b604082019050919050565b60006131e2602983613840565b91506131ed82613ea7565b604082019050919050565b6000613205602083613840565b915061321082613ef6565b602082019050919050565b6000613228602c83613840565b915061323382613f1f565b604082019050919050565b600061324b600d83613840565b915061325682613f6e565b602082019050919050565b600061326e602083613840565b915061327982613f97565b602082019050919050565b6000613291602f83613840565b915061329c82613fc0565b604082019050919050565b60006132b4602183613840565b91506132bf8261400f565b604082019050919050565b60006132d7603183613840565b91506132e28261405e565b604082019050919050565b60006132fa602c83613840565b9150613305826140ad565b604082019050919050565b600061331d601383613840565b9150613328826140fc565b602082019050919050565b61333c8161398b565b82525050565b600061334e8284612f46565b60208201915081905092915050565b60006133698284612f96565b915081905092915050565b60006133808285613000565b915061338c8284613000565b91508190509392505050565b60006020820190506133ad6000830184612f19565b92915050565b60006060820190506133c86000830186612f19565b6133d56020830185612f19565b6133e26040830184613333565b949350505050565b60006080820190506133ff6000830187612f19565b61340c6020830186612f19565b6134196040830185613333565b818103606083015261342b8184612f5d565b905095945050505050565b600060208201905061344b6000830184612f28565b92915050565b60006060820190506134666000830186612f37565b81810360208301526134788185612fc7565b90506134876040830184612f28565b949350505050565b600060208201905081810360008301526134a98184612fc7565b905092915050565b600060208201905081810360008301526134ca81613031565b9050919050565b600060208201905081810360008301526134ea81613054565b9050919050565b6000602082019050818103600083015261350a81613077565b9050919050565b6000602082019050818103600083015261352a8161309a565b9050919050565b6000602082019050818103600083015261354a816130bd565b9050919050565b6000602082019050818103600083015261356a816130e0565b9050919050565b6000602082019050818103600083015261358a81613103565b9050919050565b600060208201905081810360008301526135aa81613126565b9050919050565b600060208201905081810360008301526135ca81613149565b9050919050565b600060208201905081810360008301526135ea8161316c565b9050919050565b6000602082019050818103600083015261360a8161318f565b9050919050565b6000602082019050818103600083015261362a816131b2565b9050919050565b6000602082019050818103600083015261364a816131d5565b9050919050565b6000602082019050818103600083015261366a816131f8565b9050919050565b6000602082019050818103600083015261368a8161321b565b9050919050565b600060208201905081810360008301526136aa8161323e565b9050919050565b600060208201905081810360008301526136ca81613261565b9050919050565b600060208201905081810360008301526136ea81613284565b9050919050565b6000602082019050818103600083015261370a816132a7565b9050919050565b6000602082019050818103600083015261372a816132ca565b9050919050565b6000602082019050818103600083015261374a816132ed565b9050919050565b6000602082019050818103600083015261376a81613310565b9050919050565b60006020820190506137866000830184613333565b92915050565b60006137966137a7565b90506137a28282613a09565b919050565b6000604051905090565b600067ffffffffffffffff8211156137cc576137cb613b4b565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156137f8576137f7613b4b565b5b61380182613b7a565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006138678261398b565b91506138728361398b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156138a7576138a6613abe565b5b828201905092915050565b60006138bd8261398b565b91506138c88361398b565b9250826138d8576138d7613aed565b5b828204905092915050565b60006138ee8261398b565b91506138f98361398b565b92508282101561390c5761390b613abe565b5b828203905092915050565b60006139228261396b565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156139c25780820151818401526020810190506139a7565b838111156139d1576000848401525b50505050565b600060028204905060018216806139ef57607f821691505b60208210811415613a0357613a02613b1c565b5b50919050565b613a1282613b7a565b810181811067ffffffffffffffff82111715613a3157613a30613b4b565b5b80604052505050565b6000613a458261398b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613a7857613a77613abe565b5b600182019050919050565b6000819050919050565b6000613a988261398b565b9150613aa38361398b565b925082613ab357613ab2613aed565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f726573756c74206e6f74207375636365737366756c0000000000000000000000600082015250565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f5265766572746564206e6f742061637469766500000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4e6f7420636f6d706c6574656400000000000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b7f63616c6c206e6f74207375636365737366756c00000000000000000000000000600082015250565b61412e81613917565b811461413957600080fd5b50565b61414581613929565b811461415057600080fd5b50565b61415c8161393f565b811461416757600080fd5b50565b6141738161398b565b811461417e57600080fd5b5056fea2646970667358221220f507f3e0256c7db45761ca26f5159ea84d442c125b30bd79d69f339bab56d60964736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101f05760003560e01c80636352211e1161010f57806395d89b41116100a2578063c87b56dd11610071578063c87b56dd14610535578063e985e9c514610565578063f2fde38b14610595578063fb188650146105b1576101f0565b806395d89b41146104c1578063a22cb465146104df578063b88d4fde146104fb578063bc0af82a14610517576101f0565b80637217e0b9116100de5780637217e0b91461043957806378ebce481461046b578063867fc17a146104875780638da5cb5b146104a3576101f0565b80636352211e146103b1578063637eb40b146103e157806370a08231146103ff578063715018a61461042f576101f0565b806323b872dd1161018757806342842e0e1161015657806342842e0e1461033f5780634cd020d91461035b5780634f6ccce71461036557806352aa050714610395576101f0565b806323b872dd146102df57806324600fc3146102fb5780632f745c591461030557806335a063b414610335576101f0565b80631249c58b116101c35780631249c58b1461028f57806316e3c7491461029957806318160ddd146102b75780631920f712146102d5576101f0565b806301ffc9a7146101f557806306fdde0314610225578063081812fc14610243578063095ea7b314610273575b600080fd5b61020f600480360381019061020a9190612e9e565b6105cf565b60405161021c9190613436565b60405180910390f35b61022d6105e1565b60405161023a919061348f565b60405180910390f35b61025d60048036038101906102589190612ef0565b610673565b60405161026a9190613398565b60405180910390f35b61028d60048036038101906102889190612e21565b6106f8565b005b610297610810565b005b6102a1610835565b6040516102ae9190613436565b60405180910390f35b6102bf61084c565b6040516102cc9190613771565b60405180910390f35b6102dd610859565b005b6102f960048036038101906102f49190612d1b565b610876565b005b6103036108d6565b005b61031f600480360381019061031a9190612e21565b610a5d565b60405161032c9190613771565b60405180910390f35b61033d610b02565b005b61035960048036038101906103549190612d1b565b610b9b565b005b610363610bbb565b005b61037f600480360381019061037a9190612ef0565b610c54565b60405161038c9190613771565b60405180910390f35b6103af60048036038101906103aa9190612e5d565b610ceb565b005b6103cb60048036038101906103c69190612ef0565b610e1e565b6040516103d89190613398565b60405180910390f35b6103e9610ed0565b6040516103f69190613436565b60405180910390f35b61041960048036038101906104149190612cb6565b610ee7565b6040516104269190613771565b60405180910390f35b610437610f9f565b005b610453600480360381019061044e9190612ef0565b611027565b60405161046293929190613451565b60405180910390f35b61048560048036038101906104809190612cb6565b6110f6565b005b6104a1600480360381019061049c9190612ef0565b611190565b005b6104ab61146a565b6040516104b89190613398565b60405180910390f35b6104c9611494565b6040516104d6919061348f565b60405180910390f35b6104f960048036038101906104f49190612de5565b611526565b005b61051560048036038101906105109190612d6a565b61153c565b005b61051f61159e565b60405161052c9190613436565b60405180910390f35b61054f600480360381019061054a9190612ef0565b6115b1565b60405161055c919061348f565b60405180910390f35b61057f600480360381019061057a9190612cdf565b611658565b60405161058c9190613436565b60405180910390f35b6105af60048036038101906105aa9190612cb6565b6116ec565b005b6105b96117e4565b6040516105c69190613436565b60405180910390f35b60006105da826117ed565b9050919050565b6060600080546105f0906139d7565b80601f016020809104026020016040519081016040528092919081815260200182805461061c906139d7565b80156106695780601f1061063e57610100808354040283529160200191610669565b820191906000526020600020905b81548152906001019060200180831161064c57829003601f168201915b5050505050905090565b600061067e82611867565b6106bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b490613671565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061070382610e1e565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610774576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076b906136f1565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166107936118d3565b73ffffffffffffffffffffffffffffffffffffffff1614806107c257506107c1816107bc6118d3565b611658565b5b610801576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f8906135f1565b60405180910390fd5b61080b83836118db565b505050565b600061081c600f611994565b9050610828600f6119a2565b61083233826119b8565b50565b6000600e60029054906101000a900460ff16905090565b6000600880549050905090565b6001600e60026101000a81548160ff021916908315150217905550565b6108876108816118d3565b826119d6565b6108c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108bd90613711565b60405180910390fd5b6108d1838383611ab4565b505050565b6108de6118d3565b73ffffffffffffffffffffffffffffffffffffffff166108fc61146a565b73ffffffffffffffffffffffffffffffffffffffff1614610952576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610949906136b1565b60405180910390fd5b60005b600c80549050811015610a0d57600c818154811061099c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906003020160020160009054906101000a900460ff166109fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f190613691565b60405180910390fd5b8080610a0590613a3a565b915050610955565b5060004790503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610a59573d6000803e3d6000fd5b5050565b6000610a6883610ee7565b8210610aa9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa0906134d1565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b610b0a6118d3565b73ffffffffffffffffffffffffffffffffffffffff16610b2861146a565b73ffffffffffffffffffffffffffffffffffffffff1614610b7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b75906136b1565b60405180910390fd5b6001600a60146101000a81548160ff021916908315150217905550565b610bb68383836040518060200160405280600081525061153c565b505050565b610bc36118d3565b73ffffffffffffffffffffffffffffffffffffffff16610be161146a565b73ffffffffffffffffffffffffffffffffffffffff1614610c37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2e906136b1565b60405180910390fd5b6001600e60016101000a81548160ff021916908315150217905550565b6000610c5e61084c565b8210610c9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9690613731565b60405180910390fd5b60088281548110610cd9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001549050919050565b600a60149054906101000a900460ff16610d3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3190613511565b60405180910390fd5b6000805b8251811015610e19573073ffffffffffffffffffffffffffffffffffffffff166342842e0e3330868581518110610d9e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516040518463ffffffff1660e01b8152600401610dc4939291906133b3565b600060405180830381600087803b158015610dde57600080fd5b505af1158015610df2573d6000803e3d6000fd5b5050505061271082610e04919061385c565b91508080610e1190613a3a565b915050610d3e565b505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610ec7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ebe90613631565b60405180910390fd5b80915050919050565b6000600e60009054906101000a900460ff16905090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610f58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4f90613611565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610fa76118d3565b73ffffffffffffffffffffffffffffffffffffffff16610fc561146a565b73ffffffffffffffffffffffffffffffffffffffff161461101b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611012906136b1565b60405180910390fd5b6110256000611d1b565b565b600c818154811061103757600080fd5b9060005260206000209060030201600091509050806000015490806001018054611060906139d7565b80601f016020809104026020016040519081016040528092919081815260200182805461108c906139d7565b80156110d95780601f106110ae576101008083540402835291602001916110d9565b820191906000526020600020905b8154815290600101906020018083116110bc57829003601f168201915b5050505050908060020160009054906101000a900460ff16905083565b6110fe6118d3565b73ffffffffffffffffffffffffffffffffffffffff1661111c61146a565b73ffffffffffffffffffffffffffffffffffffffff1614611172576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611169906136b1565b60405180910390fd5b6001600e60006101000a81548160ff02191690831515021790555050565b6000600c82815481106111cc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060030201604051806060016040529081600082015481526020016001820180546111ff906139d7565b80601f016020809104026020016040519081016040528092919081815260200182805461122b906139d7565b80156112785780601f1061124d57610100808354040283529160200191611278565b820191906000526020600020905b81548152906001019060200180831161125b57829003601f168201915b505050505081526020016002820160009054906101000a900460ff16151515158152505090506000803073ffffffffffffffffffffffffffffffffffffffff1683600001516040516020016112cd9190613342565b6040516020818303038152906040526040516112e9919061335d565b6000604051808303816000865af19150503d8060008114611326576040519150601f19603f3d011682016040523d82523d6000602084013e61132b565b606091505b5091509150600081516020830151915050826113825782611381576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137890613751565b60405180910390fd5b5b806113c857806113c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113be906134b1565b60405180910390fd5b5b6001600c8681548110611404577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906003020160020160006101000a81548160ff0219169083151502179055507f7d716790d01a64421d121f2b247366a43719c87528485b9900995183b635fe8a8560405161145b9190613771565b60405180910390a15050505050565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600180546114a3906139d7565b80601f01602080910402602001604051908101604052809291908181526020018280546114cf906139d7565b801561151c5780601f106114f15761010080835404028352916020019161151c565b820191906000526020600020905b8154815290600101906020018083116114ff57829003601f168201915b5050505050905090565b6115386115316118d3565b8383611de1565b5050565b61154d6115476118d3565b836119d6565b61158c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161158390613711565b60405180910390fd5b61159884848484611f4e565b50505050565b600a60149054906101000a900460ff1681565b60606115bc82611867565b6115fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115f2906136d1565b60405180910390fd5b6000611605611faa565b905060008151116116255760405180602001604052806000815250611650565b8061162f84611fc1565b604051602001611640929190613374565b6040516020818303038152906040525b915050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6116f46118d3565b73ffffffffffffffffffffffffffffffffffffffff1661171261146a565b73ffffffffffffffffffffffffffffffffffffffff1614611768576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161175f906136b1565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156117d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117cf90613531565b60405180910390fd5b6117e181611d1b565b50565b60006001905090565b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611860575061185f8261216e565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661194e83610e1e565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600081600001549050919050565b6001816000016000828254019250508190555050565b6119d2828260405180602001604052806000815250612250565b5050565b60006119e182611867565b611a20576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a17906135d1565b60405180910390fd5b6000611a2b83610e1e565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611a9a57508373ffffffffffffffffffffffffffffffffffffffff16611a8284610673565b73ffffffffffffffffffffffffffffffffffffffff16145b80611aab5750611aaa8185611658565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611ad482610e1e565b73ffffffffffffffffffffffffffffffffffffffff1614611b2a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b2190613551565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611b9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b9190613591565b60405180910390fd5b611ba58383836122ab565b611bb06000826118db565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611c0091906138e3565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611c57919061385c565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611d168383836122bb565b505050565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611e50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e47906135b1565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611f419190613436565b60405180910390a3505050565b611f59848484611ab4565b611f65848484846122c0565b611fa4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f9b906134f1565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b60606000821415612009576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612169565b600082905060005b6000821461203b57808061202490613a3a565b915050600a8261203491906138b2565b9150612011565b60008167ffffffffffffffff81111561207d577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156120af5781602001600182028036833780820191505090505b5090505b60008514612162576001826120c891906138e3565b9150600a856120d79190613a8d565b60306120e3919061385c565b60f81b81838151811061211f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8561215b91906138b2565b94506120b3565b8093505050505b919050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061223957507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80612249575061224882612457565b5b9050919050565b61225a83836124c1565b61226760008484846122c0565b6122a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161229d906134f1565b60405180910390fd5b505050565b6122b683838361269b565b505050565b505050565b60006122e18473ffffffffffffffffffffffffffffffffffffffff166127af565b1561244a578373ffffffffffffffffffffffffffffffffffffffff1663150b7a0261230a6118d3565b8786866040518563ffffffff1660e01b815260040161232c94939291906133ea565b602060405180830381600087803b15801561234657600080fd5b505af192505050801561237757506040513d601f19601f820116820180604052508101906123749190612ec7565b60015b6123fa573d80600081146123a7576040519150601f19603f3d011682016040523d82523d6000602084013e6123ac565b606091505b506000815114156123f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123e9906134f1565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505061244f565b600190505b949350505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612531576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161252890613651565b60405180910390fd5b61253a81611867565b1561257a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161257190613571565b60405180910390fd5b612586600083836122ab565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546125d6919061385c565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612697600083836122bb565b5050565b6126a68383836127d2565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156126e9576126e4816127d7565b612728565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614612727576127268382612820565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561276b576127668161298d565b6127aa565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146127a9576127a88282612ad0565b5b5b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b505050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505060019003906000526020600020016000909190919091505550565b6000600161282d84610ee7565b61283791906138e3565b905060006007600084815260200190815260200160002054905081811461291c576000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816007600083815260200190815260200160002081905550505b6007600084815260200190815260200160002060009055600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b600060016008805490506129a191906138e3565b90506000600960008481526020019081526020016000205490506000600883815481106129f7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020015490508060088381548110612a3f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020018190555081600960008381526020019081526020016000208190555060096000858152602001908152602001600020600090556008805480612ab4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b6000612adb83610ee7565b905081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806007600084815260200190815260200160002081905550505050565b6000612b62612b5d846137b1565b61378c565b90508083825260208201905082856020860282011115612b8157600080fd5b60005b85811015612bb15781612b978882612ca1565b845260208401935060208301925050600181019050612b84565b5050509392505050565b6000612bce612bc9846137dd565b61378c565b905082815260208101848484011115612be657600080fd5b612bf1848285613995565b509392505050565b600081359050612c0881614125565b92915050565b600082601f830112612c1f57600080fd5b8135612c2f848260208601612b4f565b91505092915050565b600081359050612c478161413c565b92915050565b600081359050612c5c81614153565b92915050565b600081519050612c7181614153565b92915050565b600082601f830112612c8857600080fd5b8135612c98848260208601612bbb565b91505092915050565b600081359050612cb08161416a565b92915050565b600060208284031215612cc857600080fd5b6000612cd684828501612bf9565b91505092915050565b60008060408385031215612cf257600080fd5b6000612d0085828601612bf9565b9250506020612d1185828601612bf9565b9150509250929050565b600080600060608486031215612d3057600080fd5b6000612d3e86828701612bf9565b9350506020612d4f86828701612bf9565b9250506040612d6086828701612ca1565b9150509250925092565b60008060008060808587031215612d8057600080fd5b6000612d8e87828801612bf9565b9450506020612d9f87828801612bf9565b9350506040612db087828801612ca1565b925050606085013567ffffffffffffffff811115612dcd57600080fd5b612dd987828801612c77565b91505092959194509250565b60008060408385031215612df857600080fd5b6000612e0685828601612bf9565b9250506020612e1785828601612c38565b9150509250929050565b60008060408385031215612e3457600080fd5b6000612e4285828601612bf9565b9250506020612e5385828601612ca1565b9150509250929050565b600060208284031215612e6f57600080fd5b600082013567ffffffffffffffff811115612e8957600080fd5b612e9584828501612c0e565b91505092915050565b600060208284031215612eb057600080fd5b6000612ebe84828501612c4d565b91505092915050565b600060208284031215612ed957600080fd5b6000612ee784828501612c62565b91505092915050565b600060208284031215612f0257600080fd5b6000612f1084828501612ca1565b91505092915050565b612f2281613917565b82525050565b612f3181613929565b82525050565b612f4081613935565b82525050565b612f57612f5282613935565b613a83565b82525050565b6000612f688261380e565b612f728185613824565b9350612f828185602086016139a4565b612f8b81613b7a565b840191505092915050565b6000612fa18261380e565b612fab8185613835565b9350612fbb8185602086016139a4565b80840191505092915050565b6000612fd282613819565b612fdc8185613840565b9350612fec8185602086016139a4565b612ff581613b7a565b840191505092915050565b600061300b82613819565b6130158185613851565b93506130258185602086016139a4565b80840191505092915050565b600061303e601583613840565b915061304982613b8b565b602082019050919050565b6000613061602b83613840565b915061306c82613bb4565b604082019050919050565b6000613084603283613840565b915061308f82613c03565b604082019050919050565b60006130a7601383613840565b91506130b282613c52565b602082019050919050565b60006130ca602683613840565b91506130d582613c7b565b604082019050919050565b60006130ed602583613840565b91506130f882613cca565b604082019050919050565b6000613110601c83613840565b915061311b82613d19565b602082019050919050565b6000613133602483613840565b915061313e82613d42565b604082019050919050565b6000613156601983613840565b915061316182613d91565b602082019050919050565b6000613179602c83613840565b915061318482613dba565b604082019050919050565b600061319c603883613840565b91506131a782613e09565b604082019050919050565b60006131bf602a83613840565b91506131ca82613e58565b604082019050919050565b60006131e2602983613840565b91506131ed82613ea7565b604082019050919050565b6000613205602083613840565b915061321082613ef6565b602082019050919050565b6000613228602c83613840565b915061323382613f1f565b604082019050919050565b600061324b600d83613840565b915061325682613f6e565b602082019050919050565b600061326e602083613840565b915061327982613f97565b602082019050919050565b6000613291602f83613840565b915061329c82613fc0565b604082019050919050565b60006132b4602183613840565b91506132bf8261400f565b604082019050919050565b60006132d7603183613840565b91506132e28261405e565b604082019050919050565b60006132fa602c83613840565b9150613305826140ad565b604082019050919050565b600061331d601383613840565b9150613328826140fc565b602082019050919050565b61333c8161398b565b82525050565b600061334e8284612f46565b60208201915081905092915050565b60006133698284612f96565b915081905092915050565b60006133808285613000565b915061338c8284613000565b91508190509392505050565b60006020820190506133ad6000830184612f19565b92915050565b60006060820190506133c86000830186612f19565b6133d56020830185612f19565b6133e26040830184613333565b949350505050565b60006080820190506133ff6000830187612f19565b61340c6020830186612f19565b6134196040830185613333565b818103606083015261342b8184612f5d565b905095945050505050565b600060208201905061344b6000830184612f28565b92915050565b60006060820190506134666000830186612f37565b81810360208301526134788185612fc7565b90506134876040830184612f28565b949350505050565b600060208201905081810360008301526134a98184612fc7565b905092915050565b600060208201905081810360008301526134ca81613031565b9050919050565b600060208201905081810360008301526134ea81613054565b9050919050565b6000602082019050818103600083015261350a81613077565b9050919050565b6000602082019050818103600083015261352a8161309a565b9050919050565b6000602082019050818103600083015261354a816130bd565b9050919050565b6000602082019050818103600083015261356a816130e0565b9050919050565b6000602082019050818103600083015261358a81613103565b9050919050565b600060208201905081810360008301526135aa81613126565b9050919050565b600060208201905081810360008301526135ca81613149565b9050919050565b600060208201905081810360008301526135ea8161316c565b9050919050565b6000602082019050818103600083015261360a8161318f565b9050919050565b6000602082019050818103600083015261362a816131b2565b9050919050565b6000602082019050818103600083015261364a816131d5565b9050919050565b6000602082019050818103600083015261366a816131f8565b9050919050565b6000602082019050818103600083015261368a8161321b565b9050919050565b600060208201905081810360008301526136aa8161323e565b9050919050565b600060208201905081810360008301526136ca81613261565b9050919050565b600060208201905081810360008301526136ea81613284565b9050919050565b6000602082019050818103600083015261370a816132a7565b9050919050565b6000602082019050818103600083015261372a816132ca565b9050919050565b6000602082019050818103600083015261374a816132ed565b9050919050565b6000602082019050818103600083015261376a81613310565b9050919050565b60006020820190506137866000830184613333565b92915050565b60006137966137a7565b90506137a28282613a09565b919050565b6000604051905090565b600067ffffffffffffffff8211156137cc576137cb613b4b565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156137f8576137f7613b4b565b5b61380182613b7a565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006138678261398b565b91506138728361398b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156138a7576138a6613abe565b5b828201905092915050565b60006138bd8261398b565b91506138c88361398b565b9250826138d8576138d7613aed565b5b828204905092915050565b60006138ee8261398b565b91506138f98361398b565b92508282101561390c5761390b613abe565b5b828203905092915050565b60006139228261396b565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156139c25780820151818401526020810190506139a7565b838111156139d1576000848401525b50505050565b600060028204905060018216806139ef57607f821691505b60208210811415613a0357613a02613b1c565b5b50919050565b613a1282613b7a565b810181811067ffffffffffffffff82111715613a3157613a30613b4b565b5b80604052505050565b6000613a458261398b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613a7857613a77613abe565b5b600182019050919050565b6000819050919050565b6000613a988261398b565b9150613aa38361398b565b925082613ab357613ab2613aed565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f726573756c74206e6f74207375636365737366756c0000000000000000000000600082015250565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f5265766572746564206e6f742061637469766500000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4e6f7420636f6d706c6574656400000000000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b7f63616c6c206e6f74207375636365737366756c00000000000000000000000000600082015250565b61412e81613917565b811461413957600080fd5b50565b61414581613929565b811461415057600080fd5b50565b61415c8161393f565b811461416757600080fd5b50565b6141738161398b565b811461417e57600080fd5b5056fea2646970667358221220f507f3e0256c7db45761ca26f5159ea84d442c125b30bd79d69f339bab56d60964736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/MyNFT.sol:MyNFT",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 132,
        "contract": "contracts/MyNFT.sol:MyNFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 136,
        "contract": "contracts/MyNFT.sol:MyNFT",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 140,
        "contract": "contracts/MyNFT.sol:MyNFT",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 144,
        "contract": "contracts/MyNFT.sol:MyNFT",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 150,
        "contract": "contracts/MyNFT.sol:MyNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1119,
        "contract": "contracts/MyNFT.sol:MyNFT",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1123,
        "contract": "contracts/MyNFT.sol:MyNFT",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1126,
        "contract": "contracts/MyNFT.sol:MyNFT",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1130,
        "contract": "contracts/MyNFT.sol:MyNFT",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7,
        "contract": "contracts/MyNFT.sol:MyNFT",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 2316,
        "contract": "contracts/MyNFT.sol:MyNFT",
        "label": "reverted",
        "offset": 20,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 2318,
        "contract": "contracts/MyNFT.sol:MyNFT",
        "label": "reservedAmount",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 2339,
        "contract": "contracts/MyNFT.sol:MyNFT",
        "label": "steps",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_struct(Step)2325_storage)dyn_storage"
      },
      {
        "astId": 2151,
        "contract": "contracts/MyNFT.sol:MyNFT",
        "label": "RESERVED_TREASURY_AMOUNT",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 2154,
        "contract": "contracts/MyNFT.sol:MyNFT",
        "label": "apeSent",
        "offset": 0,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 2157,
        "contract": "contracts/MyNFT.sol:MyNFT",
        "label": "koalasSent",
        "offset": 1,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 2160,
        "contract": "contracts/MyNFT.sol:MyNFT",
        "label": "governanceApproved",
        "offset": 2,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 2163,
        "contract": "contracts/MyNFT.sol:MyNFT",
        "label": "_tokenIdCounter",
        "offset": 0,
        "slot": "15",
        "type": "t_struct(Counter)1823_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Step)2325_storage)dyn_storage": {
        "base": "t_struct(Step)2325_storage",
        "encoding": "dynamic_array",
        "label": "struct Roadmap.Step[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1823_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1822,
            "contract": "contracts/MyNFT.sol:MyNFT",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Step)2325_storage": {
        "encoding": "inplace",
        "label": "struct Roadmap.Step",
        "members": [
          {
            "astId": 2320,
            "contract": "contracts/MyNFT.sol:MyNFT",
            "label": "data",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 2322,
            "contract": "contracts/MyNFT.sol:MyNFT",
            "label": "message",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2324,
            "contract": "contracts/MyNFT.sol:MyNFT",
            "label": "completed",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}