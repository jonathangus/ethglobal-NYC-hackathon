/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface SafeLaunchInterface extends utils.Interface {
  contractName: "SafeLaunch";
  functions: {
    "abort()": FunctionFragment;
    "claimRefund(uint256[])": FunctionFragment;
    "claimableAmount(uint256[])": FunctionFragment;
    "executeStep(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reverted()": FunctionFragment;
    "stepCount()": FunctionFragment;
    "steps(uint256)": FunctionFragment;
    "stepsCompleted()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawFunds()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "abort", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimRefund",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimableAmount",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "executeStep",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "reverted", values?: undefined): string;
  encodeFunctionData(functionFragment: "stepCount", values?: undefined): string;
  encodeFunctionData(functionFragment: "steps", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "stepsCompleted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "abort", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeStep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reverted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stepCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "steps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stepsCompleted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "StepCreated(bytes32,string)": EventFragment;
    "StepExecuted(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StepCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StepExecuted"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type StepCreatedEvent = TypedEvent<
  [string, string],
  { data: string; message: string }
>;

export type StepCreatedEventFilter = TypedEventFilter<StepCreatedEvent>;

export type StepExecutedEvent = TypedEvent<[BigNumber], { stepId: BigNumber }>;

export type StepExecutedEventFilter = TypedEventFilter<StepExecutedEvent>;

export interface SafeLaunch extends BaseContract {
  contractName: "SafeLaunch";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SafeLaunchInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    abort(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "abort()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimRefund(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimRefund(uint256[])"(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimableAmount(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "claimableAmount(uint256[])"(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    executeStep(
      stepId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "executeStep(uint256)"(
      stepId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reverted(overrides?: CallOverrides): Promise<[boolean]>;

    "reverted()"(overrides?: CallOverrides): Promise<[boolean]>;

    stepCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "stepCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    steps(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, boolean] & {
        data: string;
        message: string;
        completed: boolean;
      }
    >;

    "steps(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, boolean] & {
        data: string;
        message: string;
        completed: boolean;
      }
    >;

    stepsCompleted(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { completed: BigNumber }>;

    "stepsCompleted()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { completed: BigNumber }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawFunds(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawFunds()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  abort(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "abort()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimRefund(
    tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claimRefund(uint256[])"(
    tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimableAmount(
    tokenIds: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "claimableAmount(uint256[])"(
    tokenIds: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  executeStep(
    stepId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "executeStep(uint256)"(
    stepId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reverted(overrides?: CallOverrides): Promise<boolean>;

  "reverted()"(overrides?: CallOverrides): Promise<boolean>;

  stepCount(overrides?: CallOverrides): Promise<BigNumber>;

  "stepCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  steps(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, boolean] & {
      data: string;
      message: string;
      completed: boolean;
    }
  >;

  "steps(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, boolean] & {
      data: string;
      message: string;
      completed: boolean;
    }
  >;

  stepsCompleted(overrides?: CallOverrides): Promise<BigNumber>;

  "stepsCompleted()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawFunds(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawFunds()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    abort(overrides?: CallOverrides): Promise<void>;

    "abort()"(overrides?: CallOverrides): Promise<void>;

    claimRefund(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "claimRefund(uint256[])"(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimableAmount(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimableAmount(uint256[])"(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeStep(stepId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "executeStep(uint256)"(
      stepId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    reverted(overrides?: CallOverrides): Promise<boolean>;

    "reverted()"(overrides?: CallOverrides): Promise<boolean>;

    stepCount(overrides?: CallOverrides): Promise<BigNumber>;

    "stepCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    steps(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, boolean] & {
        data: string;
        message: string;
        completed: boolean;
      }
    >;

    "steps(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, boolean] & {
        data: string;
        message: string;
        completed: boolean;
      }
    >;

    stepsCompleted(overrides?: CallOverrides): Promise<BigNumber>;

    "stepsCompleted()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFunds(overrides?: CallOverrides): Promise<void>;

    "withdrawFunds()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "StepCreated(bytes32,string)"(
      data?: null,
      message?: null
    ): StepCreatedEventFilter;
    StepCreated(data?: null, message?: null): StepCreatedEventFilter;

    "StepExecuted(uint256)"(stepId?: null): StepExecutedEventFilter;
    StepExecuted(stepId?: null): StepExecutedEventFilter;
  };

  estimateGas: {
    abort(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "abort()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimRefund(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claimRefund(uint256[])"(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimableAmount(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimableAmount(uint256[])"(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeStep(
      stepId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "executeStep(uint256)"(
      stepId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reverted(overrides?: CallOverrides): Promise<BigNumber>;

    "reverted()"(overrides?: CallOverrides): Promise<BigNumber>;

    stepCount(overrides?: CallOverrides): Promise<BigNumber>;

    "stepCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    steps(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "steps(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stepsCompleted(overrides?: CallOverrides): Promise<BigNumber>;

    "stepsCompleted()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawFunds(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawFunds()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    abort(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "abort()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimRefund(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claimRefund(uint256[])"(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimableAmount(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claimableAmount(uint256[])"(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeStep(
      stepId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "executeStep(uint256)"(
      stepId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reverted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "reverted()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stepCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stepCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    steps(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "steps(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stepsCompleted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stepsCompleted()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFunds(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawFunds()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
